{
	"name": "ADF_IGM2323001_DW_Load_exsera_complement_fact",
	"properties": {
		"description": "Dataflow to implement SCD Type 2 for IGM2323001_ DW_Load_exsera_complement_fact Table",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AzureSQL",
						"type": "DatasetReference"
					},
					"name": "sourceRaw"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSQL",
						"type": "DatasetReference"
					},
					"name": "sourceFact"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSQL",
						"type": "DatasetReference"
					},
					"name": "InsertNewData"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSQL",
						"type": "DatasetReference"
					},
					"name": "UpdateFact"
				}
			],
			"transformations": [
				{
					"name": "deriveDateColumns"
				},
				{
					"name": "selectFact"
				},
				{
					"name": "filterFact"
				},
				{
					"name": "lookupFact"
				},
				{
					"name": "selectColumns"
				},
				{
					"name": "filterNotNullAccession"
				},
				{
					"name": "UpdateDateColumns"
				},
				{
					"name": "AlterRowUpdate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          protocol_name as string,",
				"          accession_number as string,",
				"          visit_name as string,",
				"          subject_number as string,",
				"          collection_date as string,",
				"          collection_time as string,",
				"          exsera_id as string,",
				"          bb_ug_ml as string,",
				"          c3a_ng_ml as string,",
				"          c5a_ng_ml as string,",
				"          sc5b9_ng_ml as string,",
				"          c4a_ng_ml as string,",
				"          c1q_ng_ml as string,",
				"          c3_mg_dl as string,",
				"          ch50_u_ml as string,",
				"          file_name as string,",
				"          load_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> sourceRaw",
				"source(output(",
				"          protocol_name as string,",
				"          accession_number as string,",
				"          visit_name as string,",
				"          subject_number as string,",
				"          collection_date as date,",
				"          collection_time as string,",
				"          collection_date_time as timestamp,",
				"          exsera_id as string,",
				"          bb_ug_ml as string,",
				"          c3a_ng_ml as string,",
				"          c5a_ng_ml as string,",
				"          sc5b9_ng_ml as string,",
				"          c4a_ng_ml as string,",
				"          c1q_ng_ml as string,",
				"          c3_mg_dl as string,",
				"          ch50_u_ml as string,",
				"          file_name as string,",
				"          load_date as timestamp,",
				"          eff_start_date as timestamp,",
				"          eff_end_date as timestamp,",
				"          created_date as timestamp,",
				"          last_updated_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> sourceFact",
				"sourceRaw derive(eff_start_date = currentUTC('PST'),",
				"          eff_end_date = toDate('9999-12-31'),",
				"          created_date = currentUTC('PST'),",
				"          last_updated_date = currentUTC('PST'),",
				"          collection_date = toDate(collection_date, 'dd-MMM-yyyy'),",
				"          collection_date_time = toTimestamp(collection_date+' '+collection_time,'dd-MMM-yyyy HH:mm')) ~> deriveDateColumns",
				"sourceFact select(mapColumn(",
				"          protocol_name,",
				"          tgtaccession_number = accession_number,",
				"          visit_name,",
				"          subject_number,",
				"          collection_date,",
				"          collection_time,",
				"          collection_date_time,",
				"          exsera_id,",
				"          bb_ug_ml,",
				"          c3a_ng_ml,",
				"          c5a_ng_ml,",
				"          sc5b9_ng_ml,",
				"          c4a_ng_ml,",
				"          c1q_ng_ml,",
				"          c3_mg_dl,",
				"          ch50_u_ml,",
				"          file_name,",
				"          eff_start_date,",
				"          eff_end_date,",
				"          created_date,",
				"          last_updated_date,",
				"          load_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFact",
				"selectFact filter(toString(toDate(eff_end_date))=='9999-12-31') ~> filterFact",
				"sourceRaw, filterFact lookup(accession_number == tgtaccession_number,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupFact",
				"filterNotNullAccession select(mapColumn(",
				"          protocol_name = selectFact@protocol_name,",
				"          accession_number = tgtaccession_number,",
				"          visit_name = selectFact@visit_name,",
				"          subject_number = selectFact@subject_number,",
				"          collection_date = selectFact@collection_date,",
				"          collection_time = selectFact@collection_time,",
				"          collection_date_time,",
				"          exsera_id = selectFact@exsera_id,",
				"          bb_ug_ml = selectFact@bb_ug_ml,",
				"          c3a_ng_ml = selectFact@c3a_ng_ml,",
				"          c5a_ng_ml = selectFact@c5a_ng_ml,",
				"          sc5b9_ng_ml = selectFact@sc5b9_ng_ml,",
				"          c4a_ng_ml = selectFact@c4a_ng_ml,",
				"          c1q_ng_ml = selectFact@c1q_ng_ml,",
				"          c3_mg_dl = selectFact@c3_mg_dl,",
				"          ch50_u_ml = selectFact@ch50_u_ml,",
				"          file_name = selectFact@file_name,",
				"          eff_start_date,",
				"          eff_end_date,",
				"          created_date,",
				"          last_updated_date,",
				"          load_date = selectFact@load_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"lookupFact filter(!isNull(tgtaccession_number)) ~> filterNotNullAccession",
				"selectColumns derive(eff_end_date = currentUTC('PST'),",
				"          last_updated_date = currentUTC('PST')) ~> UpdateDateColumns",
				"UpdateDateColumns alterRow(updateIf(true())) ~> AlterRowUpdate",
				"deriveDateColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          protocol_name,",
				"          accession_number,",
				"          visit_name,",
				"          subject_number,",
				"          collection_date,",
				"          collection_time,",
				"          exsera_id,",
				"          bb_ug_ml,",
				"          c3a_ng_ml,",
				"          c5a_ng_ml,",
				"          sc5b9_ng_ml,",
				"          c4a_ng_ml,",
				"          c1q_ng_ml,",
				"          c3_mg_dl,",
				"          ch50_u_ml,",
				"          file_name,",
				"          eff_start_date,",
				"          eff_end_date,",
				"          created_date,",
				"          last_updated_date,",
				"          collection_date_time",
				"     )) ~> InsertNewData",
				"AlterRowUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['accession_number'],",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          protocol_name,",
				"          accession_number,",
				"          visit_name,",
				"          subject_number,",
				"          collection_date,",
				"          collection_time,",
				"          collection_date_time,",
				"          exsera_id,",
				"          bb_ug_ml,",
				"          c3a_ng_ml,",
				"          c5a_ng_ml,",
				"          sc5b9_ng_ml,",
				"          c4a_ng_ml,",
				"          c1q_ng_ml,",
				"          c3_mg_dl,",
				"          ch50_u_ml,",
				"          file_name,",
				"          eff_start_date,",
				"          eff_end_date,",
				"          created_date,",
				"          last_updated_date",
				"     )) ~> UpdateFact"
			]
		}
	}
}