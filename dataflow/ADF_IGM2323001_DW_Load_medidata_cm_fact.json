{
	"name": "ADF_IGM2323001_DW_Load_medidata_cm_fact",
	"properties": {
		"description": "Dataflow to implement SCD Type 2 for Medidata CH Fact Table",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AzureSQL",
						"type": "DatasetReference"
					},
					"name": "sourceRaw"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSQL",
						"type": "DatasetReference"
					},
					"name": "InsertNewData"
				}
			],
			"transformations": [
				{
					"name": "deriveDateColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          project as string,",
				"          study_id as string,",
				"          subject as string,",
				"          site as string,",
				"          site_number as string,",
				"          site_group as string,",
				"          instance_name as string,",
				"          instance_repeat_number as string,",
				"          folder_name as string,",
				"          data_page_name as string,",
				"          record_position as string,",
				"          save_ts as string,",
				"          study_env_site_number as string,",
				"          cmtrt as string,",
				"          cmtrt_atc as string,",
				"          cmtrt_atc_code as string,",
				"          cmtrt_atc2 as string,",
				"          cmtrt_atc2_code as string,",
				"          cmtrt_atc3 as string,",
				"          cmtrt_atc3_code as string,",
				"          cmtrt_atc4 as string,",
				"          cmtrt_atc4_code as string,",
				"          cmtrt_coderdictname as string,",
				"          cmtrt_coderdictversion as string,",
				"          cmtrt_ing as string,",
				"          cmtrt_ing_code as string,",
				"          cmtrt_prod as string,",
				"          cmtrt_prod_code as string,",
				"          cmtrt_prodsyn as string,",
				"          cmtrt_prodsyn_code as string,",
				"          cmindc as string,",
				"          cmindc_std as string,",
				"          cmindae1 as string,",
				"          cmindae1_std as string,",
				"          cmindae2 as string,",
				"          cmindae2_std as string,",
				"          cmindae3 as string,",
				"          cmindae3_std as string,",
				"          cmindae4 as string,",
				"          cmindae4_std as string,",
				"          cmindae5 as string,",
				"          cmindae5_std as string,",
				"          cmindmh1 as string,",
				"          cmindmh1_std as string,",
				"          cmindmh2 as string,",
				"          cmindmh2_std as string,",
				"          cmindmh3 as string,",
				"          cmindmh3_std as string,",
				"          cmindmh4 as string,",
				"          cmindmh4_std as string,",
				"          cmindmh5 as string,",
				"          cmindmh5_std as string,",
				"          cmindpx as string,",
				"          cmdstxt as string,",
				"          cmdosu as string,",
				"          cmdosu_std as string,",
				"          cmdosuos as string,",
				"          cmdosfrq as string,",
				"          cmdosfrq_std as string,",
				"          cmdosfos as string,",
				"          cmroute as string,",
				"          cmroute_std as string,",
				"          cmroutos as string,",
				"          cmstdat as string,",
				"          cmstdat_raw as string,",
				"          cmstdat_int as string,",
				"          cmstdat_yyyy as string,",
				"          cmstdat_mm as string,",
				"          cmstdat_dd as string,",
				"          cmongo as string,",
				"          cmongo_std as string,",
				"          cmendat as string,",
				"          cmendat_raw as string,",
				"          cmendat_int as string,",
				"          cmendat_yyyy as string,",
				"          cmendat_mm as string,",
				"          cmendat_dd as string,",
				"          cmnow as string,",
				"          cmnow_raw as string,",
				"          cmnow_int as string,",
				"          cmnow_yyyy as string,",
				"          cmnow_mm as string,",
				"          cmnow_dd as string,",
				"          cmindtm1 as string,",
				"          cmindtm2 as string,",
				"          cmindtm3 as string,",
				"          cmindtm4 as string,",
				"          cmindtm5 as string,",
				"          file_name as string,",
				"          load_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> sourceRaw",
				"sourceRaw derive(eff_start_date = currentUTC('PST'),",
				"          eff_end_date = toDate('9999-12-31'),",
				"          created_date = currentUTC('PST'),",
				"          last_updated_date = currentUTC('PST'),",
				"          save_ts = toTimestamp(save_ts, 'M/d/yyyy h:mm:ss a'),",
				"          cmstdat = toTimestamp(cmstdat,'M/d/yyyy hh:mm:ss a'),",
				"          cmstdat_raw = toDate(cmstdat_raw,'dd MMM yyyy'),",
				"          cmstdat_int = toTimestamp(cmstdat_int,'M/d/yyyy h:m:s a'),",
				"          cmendat = toTimestamp(cmendat,'M/d/yyyy hh:mm:ss a'),",
				"          cmendat_raw = toTimestamp(cmendat_raw,'dd MMM yyyy'),",
				"          cmendat_int = toTimestamp(cmendat_int,'M/d/yyyy hh:mm:ss a'),",
				"          cmnow = toTimestamp(cmnow,'M/d/yyyy hh:mm:ss a'),",
				"          cmnow_raw = toTimestamp(cmnow_raw,'dd MMM yyyy HH:mm:ss'),",
				"          cmnow_int = toTimestamp(cmnow_int,'M/d/yyyy hh:mm:ss a'),",
				"          cmnow_mm = cmnow_mm,",
				"          cmindtm1 = cmindtm1) ~> deriveDateColumns",
				"deriveDateColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          each(match(true()))",
				"     )) ~> InsertNewData"
			]
		}
	}
}